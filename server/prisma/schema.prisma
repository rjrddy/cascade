generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id            String        @id @default(uuid())
	email         String        @unique
	passwordHash  String
	createdAt     DateTime      @default(now())
	updatedAt     DateTime      @updatedAt
	plaidItems    PlaidItem[]
	accounts      Account[]
	transactions  Transaction[]
	budgets       Budget[]
	rules         Rule[]
}

model PlaidItem {
	id           String   @id @default(uuid())
	userId       String
	accessToken  String   @db.Text
	itemId       String   @unique
	institution  String?
	createdAt    DateTime @default(now())
	updatedAt    DateTime @updatedAt
	user         User     @relation(fields: [userId], references: [id])
	accounts     Account[]
}

model Account {
	id          String     @id @default(uuid())
	userId      String
	plaidItemId String?
	name        String
	officialName String?
	mask        String?
	type        String
	subtype     String?
	currentBalance Float    @default(0)
	currency    String      @default("USD")
	user        User        @relation(fields: [userId], references: [id])
	plaidItem   PlaidItem?  @relation(fields: [plaidItemId], references: [id])
	transactions Transaction[]
}

model Category {
	id        String   @id @default(uuid())
	name      String   @unique
	parentId  String?
	parent    Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
	children  Category[] @relation("CategoryHierarchy")
	// back-relations
	transactions Transaction[]
	budgets      Budget[]
	rules        Rule[]
}

model Transaction {
	id            String    @id @default(uuid())
	userId        String
	accountId     String?
	date          DateTime
	amount        Decimal   @db.Decimal(14, 2)
	merchant      String?
	description   String?
	isIncome      Boolean   @default(false)
	categoryId    String?
	plaidTxId     String?   @unique
	source        String    @default("manual") // manual | plaid
	isTransfer    Boolean   @default(false)
	createdAt     DateTime  @default(now())
	updatedAt     DateTime  @updatedAt
	user          User      @relation(fields: [userId], references: [id])
	account       Account?  @relation(fields: [accountId], references: [id])
	category      Category? @relation(fields: [categoryId], references: [id])
}

model Budget {
	id          String   @id @default(uuid())
	userId      String
	categoryId  String
	month       Int
	year        Int
	amount      Decimal  @db.Decimal(14, 2)
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt
	user        User     @relation(fields: [userId], references: [id])
	category    Category @relation(fields: [categoryId], references: [id])

	@@unique([userId, categoryId, month, year])
}

model Rule {
	id          String   @id @default(uuid())
	userId      String
	matchText   String
	categoryId  String
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt
	user        User     @relation(fields: [userId], references: [id])
	category    Category @relation(fields: [categoryId], references: [id])
}
